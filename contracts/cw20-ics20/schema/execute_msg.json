{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "This allows us to transfer *exactly one* native token",
      "type": "object",
      "required": [
        "transfer"
      ],
      "properties": {
        "transfer": {
          "$ref": "#/definitions/TransferMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "This allows us to swap contract token on osmosis via ibc",
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "$ref": "#/definitions/SwapMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "join pool",
      "type": "object",
      "required": [
        "join_pool"
      ],
      "properties": {
        "swap": {
          "$ref": "#/definitions/JoinPoolMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "SwapMsg": {
      "description": "This is the message for swapping contract token on osmosis via ibc",
      "type": "object",
      "required": [
        "channel",
        "pool_id",
        "exact_amount_out",
        "remote_address",
        "in_amount",
        "out_denom"
      ],
      "properties": {
        "in_amount": {
          "description": "in_amount",
          "type": "string"
        },
        "channel": {
          "description": "The local channel to send the packets on",
          "type": "string"
        },
        "remote_address": {
          "description": "The remote address to send the swapt token to. Don't use HumanAddress as this will likely have a different Bech32 prefix than we use and cannot be validated locally",
          "type": "string"
        },
        "pool_id": {
          "description": "pool on osmosis to swap token on",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "exact_amount_out": {
          "description": "Exact token out after swap on osmosis pool",
          "type": "string"
        },
        "timeout": {
          "description": "How long the packet lives in seconds. If not specified, use default_timeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "out_denom": {
          "description": "out denom",
          "type": "string"
        }
      }
    },
    "TransferMsg": {
      "description": "This is the message we accept via Receive",
      "type": "object",
      "required": [
        "channel",
        "remote_address"
      ],
      "properties": {
        "channel": {
          "description": "The local channel to send the packets on",
          "type": "string"
        },
        "remote_address": {
          "description": "The remote address to send to. Don't use HumanAddress as this will likely have a different Bech32 prefix than we use and cannot be validated locally",
          "type": "string"
        },
        "timeout": {
          "description": "How long the packet lives in seconds. If not specified, use default_timeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "amount": {
          "description": "amount",
          "type": "string"
        }
      }
    },
    "JoinPoolMsg": {
      "description": "This is the message we accept via Receive",
      "type": "object",
      "required": [
        "channel",
        "remote_address"
      ],
      "properties": {
        "channel": {
          "description": "The local channel to send the packets on",
          "type": "string"
        },
        "remote_address": {
          "description": "The remote address to send to. Don't use HumanAddress as this will likely have a different Bech32 prefix than we use and cannot be validated locally",
          "type": "string"
        },
        "timeout": {
          "description": "How long the packet lives in seconds. If not specified, use default_timeout",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "in_amount": {
          "description": "amount",
          "type": "string"
        },
        "pool_id": {
          "description": "pool_id",
          "type": "string"
        },
        "share_out_exact_amount": {
          "description": "gamm out",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
